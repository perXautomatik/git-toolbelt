# Define a function to create a git tag with a message
function New-GitTag {
    param (
        [Parameter(Mandatory=$true)]
        [string]$TagName,

        [Parameter(Mandatory=$true)]
        [string]$TagMessage
    )

    # Validate the tag name and message
    if ($TagName -eq $null -or $TagName -eq "") {
        Write-Error "Tag name cannot be null or empty"
        return
    }

    if ($TagMessage -eq $null -or $TagMessage -eq "") {
        Write-Error "Tag message cannot be null or empty"
        return
    }

    # Create the tag with the message
    git tag -a $TagName -m $TagMessage
}

# Define a function to get the relative path of a file in the repo
function Get-GitRelativePath {
    param (
        [Parameter(Mandatory=$true)]
        [string]$FilePath
    )

    # Validate the file path
    if ($FilePath -eq $null -or $FilePath -eq "") {
        Write-Error "File path cannot be null or empty"
        return
    }

    if (-not (Test-Path $FilePath)) {
        Write-Error "File path does not exist"
        return
    }

    # Get the relative path of the file in the repo
    git ls-files --full-name $FilePath
}

# Define a function to reset the repo hard to a tag
function Reset-GitHard {
    param (
        [Parameter(Mandatory=$true)]
        [string]$TagName
    )

    # Validate the tag name
    if ($TagName -eq $null -or $TagName -eq "") {
        Write-Error "Tag name cannot be null or empty"
        return
    }

    # Reset the repo hard to the tag
    git reset --hard $TagName
}

# Define a function to merge a tag to the repo and resolve conflicts by unioning files
function Merge-GitTag {
    param (
        [Parameter(Mandatory=$true)]
        [string]$TagName
    )

    # Validate the tag name
    if ($TagName -eq $null -or $TagName -eq "") {
        Write-Error "Tag name cannot be null or empty"
        return
    }

    # Merge the tag to the repo
    git merge $TagName

    # Resolve the merge by unioning both of the conflicting files
    git config merge.union.driver true
    git add .
    git commit -m "Merged tag $TagName"
}

# Get the files to process from the command line or use the current directory
$files = $args
if ($files -eq $null) {
    $files = Get-ChildItem -Path . -Recurse -File
}

# Get the target file from the command line or use the first file
$target = $args[0]
if ($target -eq $null) {
    $target = $files[0]
}

# Get the name of the target file without the extension
$targetName = [System.IO.Path]::GetFileNameWithoutExtension($target)

# Create a new folder called merged if it does not exist
$mergedFolder = "merged"
if (-not (Test-Path $mergedFolder)) {
    New-Item -ItemType Directory -Path $mergedFolder
}

# Create a tag with "before merge" message using the function defined above
New-GitTag -TagName "before merge" -TagMessage "Before merge"

# Loop through the files and move them to the merged folder with the target name using functions defined above
foreach ($file in $files) {
    
    # Get the relative path of the file in the repo using function defined above 
    $relativePath = Get-GitRelativePath -FilePath $file

    # Move the file to the merged folder with the target name and extension 
    $newFile = Join-Path $mergedFolder "$targetName$([System.IO.Path]::GetExtension($file))"
    
     Move-Item -Path $file -Destination $newFile

     # Commit the change with the relative path as the message 
     git add $newFile 
     git commit -m $relativePath

     # Create a tag with the index of the file as the message using function defined above 
     New-GitTag -TagName $files.IndexOf($file) -TagMessage  $files.IndexOf($file)

     # Reset the repo hard to the before merge tag using function defined above 
     Reset-GitHard -TagName "before merge"
}

# Loop through the tags created with index and merge them to the repo using function defined above 
$tags = git tag -l | Where-Object {$_ -match "\d+"}
foreach ($tag in $tags) {
    # Merge the tag to the repo and resolve conflicts by unioning files using function defined above 
    Merge-GitTag -TagName $tag
}
